// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: channel_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllChannelFollows = `-- name: GetAllChannelFollows :many
SELECT id, created_at, updated_at, user_id, channel_id FROM channel_follows
`

func (q *Queries) GetAllChannelFollows(ctx context.Context) ([]ChannelFollow, error) {
	rows, err := q.db.QueryContext(ctx, getAllChannelFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ChannelFollow
	for rows.Next() {
		var i ChannelFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChannelFollow = `-- name: InsertChannelFollow :exec
INSERT INTO channel_follows
  (id, created_at, updated_at, user_id, channel_id)
VALUES
  ($1, $2, $3, $4, $5)
`

type InsertChannelFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	ChannelID string
}

func (q *Queries) InsertChannelFollow(ctx context.Context, arg InsertChannelFollowParams) error {
	_, err := q.db.ExecContext(ctx, insertChannelFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.ChannelID,
	)
	return err
}
