// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: channels.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getAllChannels = `-- name: GetAllChannels :many
SELECT id, created_at, updated_at, name, url, last_fetched_at FROM channels
`

func (q *Queries) GetAllChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getAllChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertChannel = `-- name: InsertChannel :exec
INSERT INTO channels
  (id, created_at, updated_at, name, url)
VALUES
  ($1, $2, $3, $4, $5)
`

type InsertChannelParams struct {
	ID        string
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
}

func (q *Queries) InsertChannel(ctx context.Context, arg InsertChannelParams) error {
	_, err := q.db.ExecContext(ctx, insertChannel,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
	)
	return err
}

const updateLastFetchedAt = `-- name: UpdateLastFetchedAt :exec
UPDATE channels
SET
  last_fetched_at = $2
WHERE id = $1
`

type UpdateLastFetchedAtParams struct {
	ID            string
	LastFetchedAt sql.NullTime
}

func (q *Queries) UpdateLastFetchedAt(ctx context.Context, arg UpdateLastFetchedAtParams) error {
	_, err := q.db.ExecContext(ctx, updateLastFetchedAt, arg.ID, arg.LastFetchedAt)
	return err
}
