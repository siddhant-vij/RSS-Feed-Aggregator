// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getAllFeedFollows = `-- name: GetAllFeedFollows :many
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows
`

func (q *Queries) GetAllFeedFollows(ctx context.Context) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getAllFeedFollows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertFeedFollow = `-- name: InsertFeedFollow :exec
INSERT INTO feed_follows
  (id, created_at, updated_at, user_id, feed_id)
VALUES
  ($1, $2, $3, $4, $5)
`

type InsertFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) InsertFeedFollow(ctx context.Context, arg InsertFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, insertFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	return err
}
