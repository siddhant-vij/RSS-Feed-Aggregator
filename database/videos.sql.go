// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: videos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteOldVideos = `-- name: DeleteOldVideos :exec
DELETE FROM videos
WHERE published_at < (CURRENT_DATE - interval '1 month')
`

func (q *Queries) DeleteOldVideos(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldVideos)
	return err
}

const downvoteVideo = `-- name: DownvoteVideo :exec
UPDATE videos
SET
  vote_count = vote_count - 1
WHERE id = $1
`

func (q *Queries) DownvoteVideo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, downvoteVideo, id)
	return err
}

const getAllVideos = `-- name: GetAllVideos :many
SELECT id, created_at, updated_at, title, description, image_url, authors, published_at, url, view_count, star_rating, star_count, vote_count, channel_id FROM videos
`

func (q *Queries) GetAllVideos(ctx context.Context) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getAllVideos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.Authors,
			&i.PublishedAt,
			&i.Url,
			&i.ViewCount,
			&i.StarRating,
			&i.StarCount,
			&i.VoteCount,
			&i.ChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatsForURL = `-- name: GetStatsForURL :one
SELECT view_count, star_rating, star_count
FROM videos
WHERE url = $1
`

type GetStatsForURLRow struct {
	ViewCount  string
	StarRating string
	StarCount  string
}

func (q *Queries) GetStatsForURL(ctx context.Context, url string) (GetStatsForURLRow, error) {
	row := q.db.QueryRowContext(ctx, getStatsForURL, url)
	var i GetStatsForURLRow
	err := row.Scan(&i.ViewCount, &i.StarRating, &i.StarCount)
	return i, err
}

const getUserVideos = `-- name: GetUserVideos :many
SELECT v.id, v.created_at, v.updated_at, v.title, v.description, v.image_url, v.authors, v.published_at, v.url, v.view_count, v.star_rating, v.star_count, v.vote_count, v.channel_id,
  EXISTS(
    SELECT 1 FROM bookmarks
    WHERE bookmarks.video_id = v.id
      AND bookmarks.user_id = $1
  ) AS bookmark_status
FROM (
  SELECT id, created_at, updated_at, title, description, image_url, authors, published_at, url, view_count, star_rating, star_count, vote_count, channel_id FROM videos
  WHERE channel_id IN (
    SELECT channel_id FROM channel_follows
    WHERE user_id = $1
  )
  ORDER BY DATE(published_at) DESC,
    vote_count DESC,
    view_count DESC,
    star_count DESC,
    star_rating DESC
  LIMIT $2
) v
`

type GetUserVideosParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetUserVideosRow struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Title          string
	Description    string
	ImageUrl       string
	Authors        string
	PublishedAt    time.Time
	Url            string
	ViewCount      string
	StarRating     string
	StarCount      string
	VoteCount      int32
	ChannelID      string
	BookmarkStatus bool
}

func (q *Queries) GetUserVideos(ctx context.Context, arg GetUserVideosParams) ([]GetUserVideosRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserVideos, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserVideosRow
	for rows.Next() {
		var i GetUserVideosRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.ImageUrl,
			&i.Authors,
			&i.PublishedAt,
			&i.Url,
			&i.ViewCount,
			&i.StarRating,
			&i.StarCount,
			&i.VoteCount,
			&i.ChannelID,
			&i.BookmarkStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertVideo = `-- name: InsertVideo :exec
INSERT INTO videos
  (id, created_at, updated_at, title, description, image_url, authors, published_at, url, view_count, star_rating, star_count, vote_count, channel_id)
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
`

type InsertVideoParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	ImageUrl    string
	Authors     string
	PublishedAt time.Time
	Url         string
	ViewCount   string
	StarRating  string
	StarCount   string
	VoteCount   int32
	ChannelID   string
}

func (q *Queries) InsertVideo(ctx context.Context, arg InsertVideoParams) error {
	_, err := q.db.ExecContext(ctx, insertVideo,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.ImageUrl,
		arg.Authors,
		arg.PublishedAt,
		arg.Url,
		arg.ViewCount,
		arg.StarRating,
		arg.StarCount,
		arg.VoteCount,
		arg.ChannelID,
	)
	return err
}

const updateStatsForURL = `-- name: UpdateStatsForURL :exec
UPDATE videos
SET
  view_count = $2,
  star_rating = $3,
  star_count = $4
WHERE url = $1
`

type UpdateStatsForURLParams struct {
	Url        string
	ViewCount  string
	StarRating string
	StarCount  string
}

func (q *Queries) UpdateStatsForURL(ctx context.Context, arg UpdateStatsForURLParams) error {
	_, err := q.db.ExecContext(ctx, updateStatsForURL,
		arg.Url,
		arg.ViewCount,
		arg.StarRating,
		arg.StarCount,
	)
	return err
}

const upvoteVideo = `-- name: UpvoteVideo :exec
UPDATE videos
SET
  vote_count = vote_count + 1
WHERE id = $1
`

func (q *Queries) UpvoteVideo(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, upvoteVideo, id)
	return err
}
